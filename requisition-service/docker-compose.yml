services:
  # Requisition Service (Django Application)
  requisition-service:
    ports:
      - "8003:8000"
    build:
      context: .
      dockerfile: Dockerfile
    container_name: requisition_service
    env_file:
      - requisition-service/.env
    command: >
      sh -c "echo 'Waiting for database...' &&
             until mysql --ssl-mode=DISABLED -h $$DJANGO_DB_HOST -u $$DJANGO_DB_USER -p$$DJANGO_DB_PASSWORD -e 'SELECT 1;' ; do
               echo 'Waiting for database connection...'; sleep 5;
             done &&
             echo 'Database is up. Applying migrations...' &&
             python manage.py migrate &&
             echo 'Starting Django server...' &&
             python manage.py runserver 0.0.0.0:8000 || 
             (echo 'Falling back to Gunicorn...' &&
              gunicorn requisition_service.wsgi:application --bind 0.0.0.0:8000 --workers 3)"
    depends_on:
      requisition-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network

  # Redis Service
  redis:
    image: redis:7.2-alpine
    container_name: requisition_redis
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis_data:/data
    networks:
      - backend-network

  # Celery Worker Service
  celery:
    build:
      context: .
    container_name: requisition_celery
    env_file:
      - .env
    command: celery -A requisition_service worker --loglevel=info --concurrency=4
    depends_on:
      - redis
      - requisition-db
    networks:
      - backend-network

  # MySQL Database for Requisition Service
  requisition-db:
    image: mysql:8.0
    container_name: requisition-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: requisition_db
      MYSQL_USER: requisition_service
      MYSQL_PASSWORD: securepassword
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "3307:3306"
    volumes:
      - db_data:/var/lib/mysql
    command:
      - --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${DJANGO_DB_USER}", "-p${DJANGO_DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

volumes:
  db_data:
  redis_data:

networks:
  backend-network:
    driver: bridge
    name: amms_backend
