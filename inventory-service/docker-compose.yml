version: '3.8'

services:
  inventory-db:
    image: mysql:8.0
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-inventory_db}
      MYSQL_USER: ${MYSQL_USER:-inventory_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-inventory_password}
    volumes:
      - inventory-mysql-data:/var/lib/mysql
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 5s
      timeout: 10s
      retries: 10
    restart: unless-stopped

  inventory-service:
    build:
      context: ./inventory-service
    ports:
      - "8009:8000"
    env_file:
      - ./inventory-service/.env
    networks:
      - backend-network
    depends_on:
      inventory-db:
        condition: service_healthy
    command: >
      sh -c "until mysql -h inventory-db -u$$DJANGO_DB_USER -p$$DJANGO_DB_PASSWORD --ssl-mode=DISABLED -e 'SELECT 1;' ; do
      echo 'Waiting for database...'; sleep 2; done &&
      python manage.py collectstatic --noinput &&
      gunicorn --bind 0.0.0.0:8000 --workers 4 inventory_service.wsgi:application"
    restart: unless-stopped

  redis:
    image: redis:alpine
    container_name: inventory_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
    restart: unless-stopped

  celery:
    build:
      context: ./inventory-service
    env_file:
      - ./inventory-service/.env
    depends_on:
      - redis
      - inventory-db
    networks:
      - backend-network
    command: ["celery", "-A", "inventory_service", "worker", "--loglevel=info"]
    restart: unless-stopped

volumes:
  inventory-mysql-data:

networks:
  backend-network:
    driver: bridge