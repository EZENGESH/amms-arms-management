services:
  inventory-db:
    image: mysql:8.0
    container_name: inventory_db
    restart: always
    # FIX: Remove db.env and use variables from the app's .env file
    env_file:
      - .env
    # FIX: Map variables from .env to what the MySQL container expects
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # Add this to your .env
    ports:
      - "3306:3306"
    volumes:
      - inventory-db_data:/var/lib/mysql
    networks:
      - backend-network
    healthcheck:
      # FIX: Healthcheck now uses the application user's credentials
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$${DB_USER}", "-p$${DB_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 5

  inventory-service:
    build:
      context: .
    ports:
      - "8002:8000"
    # FIX: Use a robust startup command with mysql client
    command: >
      sh -c "until mysql --ssl-mode=DISABLED -h db -u$$DB_USER -p$$DB_PASSWORD -e 'SELECT 1;' ; do
        echo 'Waiting for database...'; sleep 2;
      done &&
      python manage.py migrate &&
      gunicorn --bind 0.0.0.0:8000 --workers 2 --timeout 120 inventory_service.wsgi:application"
    # FIX: Load all environment variables from the .env file
    env_file:
      - .env
    depends_on:
      inventory-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network

  redis:
    image: redis:alpine
    container_name: inventory_redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  celery:
    build:
      context: .
    # FIX: Load all environment variables from the .env file
    env_file:
      - .env
    depends_on:
      - redis
      - db
    networks:
      - backend-network

volumes:
  inventory-db_data:

networks:
  backend-network:
    driver: bridge