version: '3.8'

services:
  # User Service
  user-service:
    build:
      context: ./user-service
    ports:
      - "8001:8000"
    env_file:
      - ./user-service/.env
    networks:
      - backend-network
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "until mysql -h db -u$$DJANGO_DB_USER -p$$DJANGO_DB_PASSWORD --ssl-mode=DISABLED -e 'SELECT 1;' ; do
      echo 'Waiting for database...'; sleep 2; done &&
      python manage.py collectstatic --noinput &&
      gunicorn --bind 0.0.0.0:8000 --workers 4 user_service.wsgi:application"
    restart: unless-stopped

  db:
    image: mysql:8.0
    ports:
      - "3307:3306"
    env_file:
      - ./user-service/db.env
    volumes:
      - user-mysql-data:/var/lib/mysql
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${MYSQL_ROOT_PASSWORD}", "--ssl-mode=DISABLED"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  user-celery:
    build:
      context: ./user-service
    command: celery -A user_service worker --loglevel=info --concurrency=4
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - ./user-service/.env
    networks:
      - backend-network
    restart: unless-stopped

  # Inventory Service
  inventory-service:
    build:
      context: ./inventory-service
    ports:
      - "8009:8000"
    env_file:
      - ./inventory-service/.env
    networks:
      - backend-network
    depends_on:
      inventory-db:
        condition: service_healthy
    command: >
      sh -c "until mysql -h inventory-db -u$$DJANGO_DB_USER -p$$DJANGO_DB_PASSWORD --ssl-mode=DISABLED -e 'SELECT 1;' ; do
      echo 'Waiting for database...'; sleep 2; done &&
      python manage.py collectstatic --noinput &&
      gunicorn --bind 0.0.0.0:8000 --workers 4 inventory_service.wsgi:application"
    restart: unless-stopped

  inventory-db:
    image: mysql:8.0
    ports:
      - "3308:3306"
    env_file:
      - ./inventory-service/db.env
    volumes:
      - inventory-mysql-data:/var/lib/mysql
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${MYSQL_ROOT_PASSWORD}", "--ssl-mode=DISABLED"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  # Requisition Service
  requisition-service:
    build:
      context: ./requisition-service
    ports:
      - "8003:8000"
    env_file:
      - ./requisition-service/.env
    networks:
      - backend-network
    depends_on:
      requisition-db:
        condition: service_healthy
    command: >
      sh -c "until mysql -h requisition-db -u$$DJANGO_DB_USER -p$$DJANGO_DB_PASSWORD --ssl-mode=DISABLED -e 'SELECT 1;' ; do
      echo 'Waiting for database...'; sleep 2; done &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn --bind 0.0.0.0:8000 --workers 4 requisition_service.wsgi:application"
    restart: unless-stopped

  requisition-db:
    image: mysql:8.0
    ports:
      - "3309:3306"
    env_file:
      - ./requisition-service/db.env
    volumes:
      - requisition-mysql-data:/var/lib/mysql
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${MYSQL_ROOT_PASSWORD}", "--ssl-mode=DISABLED"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  # Reporting Service
  reporting-service:
    build:
      context: ./reporting-service
    ports:
      - "8004:8000"
    env_file:
      - ./reporting-service/.env
    networks:
      - backend-network
    depends_on:
      reporting-db:
        condition: service_healthy
    command: >
      sh -c "until mysql -h reporting-db -u$$DJANGO_DB_USER -p$$DJANGO_DB_PASSWORD --ssl-mode=DISABLED -e 'SELECT 1;' ; do
      echo 'Waiting for database...'; sleep 2; done &&
      python manage.py collectstatic --noinput &&
      gunicorn --bind 0.0.0.0:8000 --workers 4 reporting_service.wsgi:application"
    restart: unless-stopped

  reporting-db:
    image: mysql:8.0
    ports:
      - "3310:3306"
    env_file:
      - ./reporting-service/db.env
    volumes:
      - reporting-mysql-data:/var/lib/mysql
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${MYSQL_ROOT_PASSWORD}", "--ssl-mode=DISABLED"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - "8081:8080"
    env_file:
      - ./api-gateway/.env
    networks:
      - frontend-network
      - backend-network
    depends_on:
      user-service:
        condition: service_started
      inventory-service:
        condition: service_started
      requisition-service:
        condition: service_started
      reporting-service:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    networks:
      - frontend-network
    depends_on:
      api-gateway:
        condition: service_started
    restart: unless-stopped

volumes:
  user-mysql-data:
  inventory-mysql-data:
  redis-data:
  requisition-mysql-data:
  reporting-mysql-data:

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge