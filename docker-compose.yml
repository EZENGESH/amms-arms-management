user-service:
  build: ./user-service
  container_name: user-service
  env_file:
    - ./user-service/.env   # <---- use this instead of db.env
  command: >
    sh -c "
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn user_service.wsgi:application --bind 0.0.0.0:8000 --workers 4"
  volumes:
    - ./user-service:/app
    - staticfiles:/app/staticfiles
  depends_on:
    user-db:
      condition: service_healthy
    redis:
      condition: service_started
  networks:
    - backend
  restart: always

  user-db:
    image: mysql:8.0
    container_name: user-db
    env_file:
      - ./user-service/db.env
    volumes:
      - user-mysql-data:/var/lib/mysql
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "--password=$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================
  # Inventory Service
  # ========================
  inventory-service:
    build: ./inventory-service
    container_name: inventory-service
    env_file:
      - ./inventory-service/db.env
    environment:
      DB_HOST: inventory-db
      DB_PORT: 3306
    command: >
      sh -c "
        until nc -z inventory-db 3306;
        do
          echo 'Waiting for inventory-db...';
          sleep 2;
        done;
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn inventory_service.wsgi:application --bind 0.0.0.0:8000 --workers 4"
    volumes:
      - ./inventory-service:/app
      - staticfiles:/app/staticfiles
    depends_on:
      - inventory-db
      - redis
    networks:
      - backend
    restart: always

  inventory-db:
    image: mysql:8.0
    container_name: inventory-db
    env_file:
      - ./inventory-service/db.env
    volumes:
      - inventory-mysql-data:/var/lib/mysql
    networks:
      - backend
    restart: always

  # ========================
  # Requisition Service
  # ========================
  requisition-service:
    build: ./requisition-service
    container_name: requisition-service
    env_file:
      - ./requisition-service/db.env
    environment:
      DB_HOST: requisition-db
      DB_PORT: 3306
    command: >
      sh -c "
        until nc -z requisition-db 3306;
        do
          echo 'Waiting for requisition-db...';
          sleep 2;
        done;
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn requisition_service.wsgi:application --bind 0.0.0.0:8000 --workers 4"
    volumes:
      - ./requisition-service:/app
      - staticfiles:/app/staticfiles
    depends_on:
      - requisition-db
      - redis
    networks:
      - backend
    restart: always

  requisition-db:
    image: mysql:8.0
    container_name: requisition-db
    env_file:
      - ./requisition-service/db.env
    volumes:
      - requisition-mysql-data:/var/lib/mysql
    networks:
      - backend
    restart: always

  # ========================
  # Reporting Service
  # ========================
  reporting-service:
    build: ./reporting-service
    container_name: reporting-service
    env_file:
      - ./reporting-service/db.env
    environment:
      DB_HOST: reporting-db
      DB_PORT: 3306
    command: >
      sh -c "
        until nc -z reporting-db 3306;
        do
          echo 'Waiting for reporting-db...';
          sleep 2;
        done;
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn reporting_service.wsgi:application --bind 0.0.0.0:8000 --workers 4"
    volumes:
      - ./reporting-service:/app
      - staticfiles:/app/staticfiles
    depends_on:
      - reporting-db
      - redis
    networks:
      - backend
    restart: always

  reporting-db:
    image: mysql:8.0
    container_name: reporting-db
    env_file:
      - ./reporting-service/db.env
    volumes:
      - reporting-mysql-data:/var/lib/mysql
    networks:
      - backend
    restart: always

  # ========================
  # Shared Dependencies
  # ========================
  redis:
    image: redis:7-alpine
    container_name: redis
    networks:
      - backend
    restart: always

  # ========================
  # API Gateway
  # ========================
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:80"
    depends_on:
      - user-service
      - inventory-service
      - requisition-service
      - reporting-service
    networks:
      - backend
    restart: always

  # ========================
  # Frontend
  # ========================
  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "5173:5173"
    depends_on:
      - api-gateway
    networks:
      - backend
    restart: always

# ========================
# Networks & Volumes
# ========================
networks:
  backend:
    driver: bridge

volumes:
  user-mysql-data:
  inventory-mysql-data:
  requisition-mysql-data:
  reporting-mysql-data:
  staticfiles: